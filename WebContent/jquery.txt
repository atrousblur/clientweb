jQuery
	- 자바스크립트로 만들어진 라이브러리 프레임워크처럼 쓰인다.
	- DOM을 쉽게 사용할 수 있도록 지원한다.
	- 크로스브라우징 (모든 브라우저에서 동일한 뷰를 볼 수 있도록 구성)을 구현
	
1. 기능
	- DOM
		: DOM 객체의 필수 속성, 메소드, 노드제어, CSS(스타일) 제어
	- Ajax
	- 플러그인
		: 필요한 기능이 이미 만들어져 있는 것 (jQuery로 만들어진 완제품)
	- Effect
		: 애니메이션 효과
		
		
2. jQuery 사용방법
	1) 라이브러리 파일을 직접 다운로드 받아서 프로젝트에 추가한 후에 사용하는 방법 (js파일추가)
		- the compressed : jquery-3.2.1.min.js	(압축버전 - 로딩속도 빠름)
		- the uncompressed : jquery-3.2.1.js	(개발자버전 - 수정해서 작업 가능)
		→ 자바스크립트 외부라이브러리 추가해서 사용하는 방법으로 사용
		
	2) cdn방식
		외부사이트에서 공유한 jQuery라이브러리 경로를 추가하여 작업


3. 형식
	1) ready handler를 이용해서 작업
		자바스크립트이므로 <script>태그 내에서 작업
		→ 브라우저 내부에서 DOM객체가 생성이 완료되었으면 작업을 jQuery 작업을 시작하겠다는 의미로 해석 
		
		$(document).ready(function(){
		    ㄴ선택자 (CSS)   ㄴ이벤트 (jQuery코드 ; 자바스크립트 문법)
		  
							}
		)
		
	2) 일반적인 jQuery의 문법
		$("선택자").동작()
		|    	|                ㄴjQuery js파일에 미리 정의되어 있는 / 실행할 수 있는 기능
		| 		ㄴ CSS와 거의 동일 : class속성 . , id속성 #
		|
		ㄴjQuery를 의미. jQuery의 약식기호
		
		→ 무엇을 어떻게
			 ㄴ선택자     ㄴ동작, 이벤트와 함께 정의

			 
4. 선택자
	- $ (객체) : 선택자로 지정한 객체에 적용
	- $ ("*") : DOM 객체의 모든 요소에 적용
	- $ ("#id명") : 지정한 id속성으로 정의된 요소에 적용
	- $ (".class명") : 지정한 class속성으로 정의된 요소에 적용
	- $ ("태그명") : 해당 태그로 정의된 요소에 적용
	- $ (this) : 현재 작업 중인 객체에 적용하겠다는 의미
	- $ ("태그명 1 태그명2") : 태그명1의 내부에 하위로 정의되어 있는 태그2를 선택자로 사용하겠다는 의미
		ex) $("div h1") : div태그 하위태그인 h1을 선택
	- $ ("태그명.클래스명") : 정의된 태그들 중에서 해당 클래스명으로 정의된 요소만 선택하겠다는 의미
	- $ ("태그명:first) : 문서내에서 지정한 태그로 정의된 첫번째 요소
	- $ ("태그명1 태그명2: first-child") : 태그명1의 하위 태그2 중 첫번째 자식 노드에 해당하는 요소
																	 → 조건에 만족하는 태그들이 여러 개면 모두 선택자로 지정
		ex) $ ("ul li:first-child") : 모든 ul안에 첫번째 li들이 선택
	- $ ("[속성명]") : 정의된 속성을 갖고 있는 모든 요소를 선택
	- $ ("태그명[속성명=속성값]") : 정의된 태그의 속성명과 속성값이 일치하는 요소를 선택
	- $ (":input태그의 type") : 해당 type으로 정의된 form태그의 요소가 선택. HTML5의 요소에도 적용
		ex) $ (":button") : <input type="button">인 요소와 <button>인 요소 모두 
	- $ ("태그명:even") : 태그의 짝수 ~ 인덱스 0부터
	- $ ("태그명:odd") : 태그의 홀수
	
5. DOM 제어 메소드
	after() : 
	prepend() :
	append() :
	before() :
	remove() :
	empty() : 
	children()는 특정 노드의 모든 자식 노드를 가져오기
	last() : lastChild
	first() : firstChild
	
6. setter / getter 메소드
	text() : 원하는 위치에 텍스트를 추가	- setter/getter 모두 사용 가능 
				→ div, p, span 태그 등의 text를 반환하거나 설정
				→ text()에 의해서 문자열이 세팅되는 경우 html태그를 적용할 수 없다.
	val() : 입력 필드의 값을 반환하거나 설정 - setter/getter 모두 사용 가능
	css() : css속성을 적용 (여러개인 경우 ,로 구분)
	html("추가되는 태그") : 원하는 위치에 html태그를 추가
				→ text()와는 다르게 태그가 실행되어 추가된다.
	attr() : 태그의 속성을 설정하거나 설정된 속성의 값을 출력 - setter/getter 모두 사용 가능
	
	
7. 이벤트
	1) on()을 이용해서 사용하는 방법 - 정식
		$("선택자").on("click",function()){
		});
		→ 선택자에 해당하는 요소를 클릭하면 function내부의 코드를 실행하겠따는 의미
	
		동적으로 생선된 요소에 이벤트를 연결할 때 on을 이용해서 작업
		이벤트를 여러개 정의해서 사용할 수 있다.
		$("#id명").on({mouseover:function(){.....}, //callback으로 함수명만 정의
								click:function(){.....},
								keyup:function(){......}
								});
								
	2) bind()를 이용해도 가능하다. on이 성능이 개선된 메소드
	3) 이벤트에 대한 약식 표현
		click()...
		mouseover(function(){
		});
		→ 동적요소에서 사용할 수 없다.
	
	
8. Effect
	hide() : 선택된 요소를 화면에서 감춘다.
	animate() : 커스텀 애니메이션을 만들 때 사용. 이동, 효과를 정의하는 것은 모두 css효과를 적용할 수 있다.
		[형식]
		.animate( properties [, duration ] [, easing ] [, complete ] )
		
		properties : {}로 표현이 가능하며 필수지정해야 하는 요소 - css속성
		duration(speed) : 효과가 나타나는 속도를 의미 - 단위(milliseconds)
		easing : 포인트 이동할 때 애니메이션 속도를 지정
		complete(callback) : animate메소드의 실행이 끝나고 처리해야하는 코드가 있는 경우 함수명을 정의 (callback으로 정의하기)
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		